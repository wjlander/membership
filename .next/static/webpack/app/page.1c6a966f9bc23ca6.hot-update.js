"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/pocketbase.ts":
/*!*******************************!*\
  !*** ./src/lib/pocketbase.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthService: () => (/* binding */ AuthService),\n/* harmony export */   TenantService: () => (/* binding */ TenantService),\n/* harmony export */   createMailingList: () => (/* binding */ createMailingList),\n/* harmony export */   createMembership: () => (/* binding */ createMembership),\n/* harmony export */   createMembershipType: () => (/* binding */ createMembershipType),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getDashboardStats: () => (/* binding */ getDashboardStats),\n/* harmony export */   getMailingLists: () => (/* binding */ getMailingLists),\n/* harmony export */   getMembershipTypes: () => (/* binding */ getMembershipTypes),\n/* harmony export */   getMemberships: () => (/* binding */ getMemberships),\n/* harmony export */   getOrganization: () => (/* binding */ getOrganization),\n/* harmony export */   getOrganizationBySubdomain: () => (/* binding */ getOrganizationBySubdomain),\n/* harmony export */   getUserSubscriptions: () => (/* binding */ getUserSubscriptions),\n/* harmony export */   getUsers: () => (/* binding */ getUsers),\n/* harmony export */   pb: () => (/* binding */ pb),\n/* harmony export */   updateMembership: () => (/* binding */ updateMembership),\n/* harmony export */   updateMembershipType: () => (/* binding */ updateMembershipType),\n/* harmony export */   updateSubscription: () => (/* binding */ updateSubscription),\n/* harmony export */   updateUserStatus: () => (/* binding */ updateUserStatus)\n/* harmony export */ });\n/* harmony import */ var pocketbase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pocketbase */ \"(app-pages-browser)/./node_modules/pocketbase/dist/pocketbase.es.mjs\");\n\n// PocketBase client singleton\nclass PocketBaseClient {\n    static getInstance() {\n        if (!PocketBaseClient.instance) {\n            const url = \"https://p.ringing.org.uk\" || 0;\n            PocketBaseClient.instance = new pocketbase__WEBPACK_IMPORTED_MODULE_0__[\"default\"](url);\n        }\n        return PocketBaseClient.instance;\n    }\n}\nconst pb = PocketBaseClient.getInstance();\n// Helper functions for multi-tenant operations\nclass TenantService {\n    static async getOrganizationBySubdomain(subdomain) {\n        try {\n            const record = await pb.collection('organizations').getFirstListItem('subdomain = \"'.concat(subdomain, '\" && status = \"active\"'));\n            return record;\n        } catch (error) {\n            console.warn(\"Organization '\".concat(subdomain, \"' not found or PocketBase not accessible:\"), error);\n            return null;\n        }\n    }\n    static async getCurrentTenant() {\n        if (false) {}\n        const hostname = window.location.hostname;\n        const subdomain = hostname.split('.')[0];\n        // For development, check if subdomain is in the URL path or query\n        if (hostname === 'localhost' || hostname.includes('127.0.0.1')) {\n            const urlParams = new URLSearchParams(window.location.search);\n            const tenantParam = urlParams.get('tenant');\n            if (tenantParam) {\n                return this.getOrganizationBySubdomain(tenantParam);\n            }\n            // Try to get default organization for development\n            // Try to get default organization for development\n            try {\n                const records = await pb.collection('organizations').getList(1, 1, {\n                    filter: 'status = \"active\"'\n                });\n                if (records.items.length > 0) {\n                    return records.items[0];\n                }\n                // If no organizations exist, return a development fallback\n                console.warn('No organizations found in database. Using development fallback.');\n                return {\n                    id: 'dev-org',\n                    name: 'Development Organization',\n                    subdomain: 'dev-org',\n                    status: 'active',\n                    created: new Date().toISOString(),\n                    updated: new Date().toISOString()\n                };\n            } catch (error) {\n                console.warn('PocketBase not accessible. Using development fallback organization.');\n                return {\n                    id: 'dev-org',\n                    name: 'Development Organization',\n                    subdomain: 'dev-org',\n                    status: 'active',\n                    created: new Date().toISOString(),\n                    updated: new Date().toISOString()\n                };\n            }\n        }\n        return this.getOrganizationBySubdomain(subdomain);\n    }\n    static setTenantContext(tenantId) {\n        // Set tenant context for subsequent requests\n        pb.beforeSend = function(url, options) {\n            options.headers = {\n                ...options.headers,\n                'X-Tenant-ID': tenantId\n            };\n            return {\n                url,\n                options\n            };\n        };\n    }\n}\n// Authentication helpers\nclass AuthService {\n    static async login(email, password, tenantId) {\n        try {\n            TenantService.setTenantContext(tenantId);\n            const authData = await pb.collection('users').authWithPassword(email, password);\n            // Verify user belongs to the correct tenant\n            if (authData.record.tenant_id !== tenantId) {\n                await pb.authStore.clear();\n                throw new Error('Invalid credentials for this organization');\n            }\n            return authData;\n        } catch (error) {\n            console.error('Login error:', error);\n            throw error;\n        }\n    }\n    static async register(userData) {\n        try {\n            TenantService.setTenantContext(userData.tenant_id);\n            const record = await pb.collection('users').create({\n                ...userData,\n                role: 'member',\n                status: 'pending'\n            });\n            return record;\n        } catch (error) {\n            console.error('Registration error:', error);\n            throw error;\n        }\n    }\n    static logout() {\n        pb.authStore.clear();\n    }\n    static getCurrentUser() {\n        return pb.authStore.model;\n    }\n    static isAuthenticated() {\n        return pb.authStore.isValid;\n    }\n}\nconst getCurrentTenantId = ()=>{\n    var _pb_authStore_model;\n    return ((_pb_authStore_model = pb.authStore.model) === null || _pb_authStore_model === void 0 ? void 0 : _pb_authStore_model.tenant_id) || null;\n};\n// Organization methods\nconst getOrganization = async (id)=>{\n    try {\n        return await pb.collection('organizations').getOne(id);\n    } catch (error) {\n        console.error('Error fetching organization:', error);\n        return null;\n    }\n};\nconst getOrganizationBySubdomain = async (subdomain)=>{\n    try {\n        const records = await pb.collection('organizations').getList(1, 1, {\n            filter: 'subdomain = \"'.concat(subdomain, '\"')\n        });\n        return records.items[0] || null;\n    } catch (error) {\n        console.error('Error fetching organization by subdomain:', error);\n        return null;\n    }\n};\n// User methods\nconst getUsers = async function() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, perPage = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50, filter = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : '';\n    return await pb.collection('users').getList(page, perPage, {\n        filter: filter ? 'name ~ \"'.concat(filter, '\" || email ~ \"').concat(filter, '\"') : '',\n        sort: '-created',\n        expand: 'tenant_id'\n    });\n};\nconst updateUserStatus = async (userId, status)=>{\n    return await pb.collection('users').update(userId, {\n        status\n    });\n};\n// Membership Type methods\nconst getMembershipTypes = async ()=>{\n    return await pb.collection('membership_types').getFullList({\n        filter: 'active = true',\n        sort: 'price'\n    });\n};\nconst createMembershipType = async (data)=>{\n    return await pb.collection('membership_types').create({\n        ...data,\n        tenant_id: getCurrentTenantId()\n    });\n};\nconst updateMembershipType = async (id, data)=>{\n    return await pb.collection('membership_types').update(id, data);\n};\n// Membership methods\nconst getMemberships = async function() {\n    let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, perPage = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50, filter = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : '';\n    return await pb.collection('memberships').getList(page, perPage, {\n        filter,\n        sort: '-created',\n        expand: 'user_id,membership_type_id'\n    });\n};\nconst createMembership = async (data)=>{\n    return await pb.collection('memberships').create({\n        ...data,\n        tenant_id: getCurrentTenantId()\n    });\n};\nconst updateMembership = async (id, data)=>{\n    return await pb.collection('memberships').update(id, data);\n};\n// Mailing List methods\nconst getMailingLists = async ()=>{\n    return await pb.collection('mailing_lists').getFullList({\n        filter: 'active = true',\n        sort: 'name'\n    });\n};\nconst createMailingList = async (data)=>{\n    return await pb.collection('mailing_lists').create({\n        ...data,\n        tenant_id: getCurrentTenantId()\n    });\n};\n// List Subscription methods\nconst getUserSubscriptions = async (userId)=>{\n    return await pb.collection('list_subscriptions').getFullList({\n        filter: 'user_id = \"'.concat(userId, '\"'),\n        expand: 'list_id'\n    });\n};\nconst updateSubscription = async (userId, listId, subscribed)=>{\n    try {\n        // Try to find existing subscription\n        const existing = await pb.collection('list_subscriptions').getFirstListItem('user_id = \"'.concat(userId, '\" && list_id = \"').concat(listId, '\"'));\n        return await pb.collection('list_subscriptions').update(existing.id, {\n            subscribed\n        });\n    } catch (error) {\n        // Create new subscription if it doesn't exist\n        return await pb.collection('list_subscriptions').create({\n            tenant_id: getCurrentTenantId(),\n            user_id: userId,\n            list_id: listId,\n            subscribed\n        });\n    }\n};\n// Dashboard stats\nconst getDashboardStats = async ()=>{\n    const tenantId = getCurrentTenantId();\n    if (!tenantId) throw new Error('No tenant context');\n    const [users, memberships] = await Promise.all([\n        pb.collection('users').getList(1, 1, {\n            filter: 'tenant_id = \"'.concat(tenantId, '\"')\n        }),\n        pb.collection('memberships').getList(1, 1, {\n            filter: 'tenant_id = \"'.concat(tenantId, '\"')\n        })\n    ]);\n    const activeUsers = await pb.collection('users').getList(1, 1, {\n        filter: 'tenant_id = \"'.concat(tenantId, '\" && status = \"active\"')\n    });\n    const pendingUsers = await pb.collection('users').getList(1, 1, {\n        filter: 'tenant_id = \"'.concat(tenantId, '\" && status = \"pending\"')\n    });\n    const activeMemberships = await pb.collection('memberships').getList(1, 1, {\n        filter: 'tenant_id = \"'.concat(tenantId, '\" && status = \"active\"')\n    });\n    // Calculate expiring memberships (next 30 days)\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    const expiringMemberships = await pb.collection('memberships').getList(1, 1, {\n        filter: 'tenant_id = \"'.concat(tenantId, '\" && status = \"active\" && end_date <= \"').concat(thirtyDaysFromNow.toISOString().split('T')[0], '\"')\n    });\n    return {\n        totalMembers: users.totalItems,\n        activeMembers: activeUsers.totalItems,\n        pendingMembers: pendingUsers.totalItems,\n        totalMemberships: activeMemberships.totalItems,\n        expiringMemberships: expiringMemberships.totalItems\n    };\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pb);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/pocketbase.ts\n"));

/***/ })

});